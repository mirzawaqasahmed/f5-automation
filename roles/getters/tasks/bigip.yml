---
  - name: Collect BIG-IP LTM facts
    bigip_facts:
      # gather_subset:
      #   - all
      include: # monitors, profiles, asm-policy-stats, client-ssl-profiles, devices, device-groups, external-monitors, fasthttp-profiles, fastl4-profiles, gateway-icmp-monitors, gtm-pools, gtm-servers, gtm-wide-ips, gtm-a-pools, gtm-a-wide-ips, gtm-aaaa-pools, gtm-aaaa-wide-ips, gtm-cname-pools, gtm-cname-wide-ips, gtm-mx-pools, gtm-mx-wide-ips, gtm-naptr-pools, gtm-naptr-wide-ips, gtm-srv-pools, gtm-srv-wide-ips, http-monitors, https-monitors, http-profiles, iapp-services, iapplx-packages, icmp-monitors, interfaces, internal-data-groups, irules, ltm-pools, nodes, oneconnect-profiles, partitions, provision-info, self-ips, server-ssl-profiles, software-volumes, software-images, software-hotfixes, ssl-certs, ssl-keys, system-db, system-info, tcp-monitors, tcp-half-open-monitors, tcp-profiles, traffic-groups, trunks, udp-profiles, vcmp-guests, virtual-addresses, virtual-servers, vlans, 
        - address_class
        - certificate
        - client_ssl_profile
        - device
        - device_group
        - interface
        - key
        - node
        - pool
        - provision
        - rule
        - self_ip
        - software
        - system_info
        - traffic_group
        - trunk
        - virtual_address
        - virtual_server
        - vlan
      validate_certs: False
      provider: "{{ f5_cred }}"
    delegate_to: localhost
    when: inventory_hostname in groups['ltm']
    register: ltm_facts

  - name: Get BIG-IP GTM facts
    bigip_gtm_facts:
      server: "{{ inventory_hostname }}"
      user: "{{ ansible_user }}"
      password: "{{ ansible_ssh_pass }}"
      include: pool,wide_ip,server
      # filter: my_pool
      provider: "{{ f5_cred }}"
    delegate_to: localhost
    when: inventory_hostname in groups['gtm']
    register: gtm_facts

  # - name: Check if % Device in HA active or standby
  #   set_fact:
  #     ha_status: |
  #       {%- set device_status_dict = {"HA_STATE_STANDBY": "standby", "HA_STATE_ACTIVE": "active"} -%}
  #       {%- set device_status = {"status": "HA_STATE_STANDBY"} -%}
  #       {% set device_dict = ltm_config.ansible_facts.device %}
  #         {% for device, name in device_dict.items() %}
  #           {% if name.hostname == inventory_hostname + '.ifds.net' %}
  #             {%- set _ = device_status.update({"status":device_status_dict.get(name.failover_state)}) -%}
  #             built_hostname = {{ inventory_hostname ~ '.ifds.net' }}
  #             hostname = {{ name.hostname }}
  #             failover = {{ name.failover_state }}
  #           {% endif %}
  #         {% endfor %}
  #       {{ device_status.status | trim }}
  #   when: inventory_hostname in groups['ltm']

  - debug: var=hostvars[inventory_hostname]['ltm_facts']['devices']
    when: debug is defined

  - name: Ensure Stat directory exists
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - facts
      - "facts/{{ inventory_hostname }}"

  - name: save LTM facts
    copy:
      content: "{{ hostvars[inventory_hostname]['ansible_facts'] | to_yaml }}"
      dest: "facts/{{ inventory_hostname }}/out_ltm_facts.yml"

  - name: save GTM facts
    copy:
      content: "{{ hostvars[inventory_hostname]['gtm_facts'] | to_yaml }}"
      dest: "facts/{{ inventory_hostname }}/out_gtm_facts.yml"